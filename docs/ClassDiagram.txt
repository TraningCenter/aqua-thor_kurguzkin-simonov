@startuml
skinparam classAttributeIconSize 0

class Main {
    -Controller controller
}

class Field {
    -int height
    -int width
    -bolean isClosed
    -final int maxWidth
    -final int maxHeight
    +Field(isClosed, width, height)
}

enum AnimalCode {
    SHARK
    FISH
}

interface EntityView {
}
AnimalView ..|> EntityView
class AnimalView {
    -AnimalCode animalCode
    -int xCoordinate
    -int yCoordinate
    +AnimalCode(animalCode, x, y)
}
StreamView ..|> EntityView
class StreamView {
    -int start
    -int end
    -int speed
    +StreamView(start, end, speed)
}

Snapshot ..> EntityView
class Snapshot {
    -List<EntityView> views
    -int iterationNum
    +Snapshot(views, iterationNum)
}

class Statistics {
    -int iterationStep
    -int fishAmount
    -int sharkAmount
}

Main *-- Controller
Controller *-- Field
class Controller {
    -String configFile
    -String xsdConfigFile
    -String inputFile
    -String xsdInputFile
    -String outputXMLFile
    -String xsdOutputFile
    -String outputCSVFile
    -DOMParser configParser
    -Parser inputParser
    -Field field
    -int gameTime
    -DataHandler dataHandler
    -Visualizer visualizer
    -XMLWriter xmlWriter
    -CSVWriter csvWriter
    +Controller(configFile, inputFile, outputXMLFile, outputCSVFile)
    +work()
    -initialize()
    -checkFilesChanged()
}

Controller *-left- Parser
abstract class Parser {
    +{abstract} Map<String, Object> parseInput(String fileLink, String xsdFileLink)
    #Map<String, Object> listToMap(List<Object> list)
    #boolean validateXML(String xmlFileName, String xsdFileName)
}

DOMParser -up-|> Parser
class DOMParser {
    +Map<String, Object> parseInput(fileLink, xsdFileLink)
    +Map<String, Object> parseConfigure(String fileLink, String xsdFileLink)
}
SAXParser -up-|> Parser
class SAXParser {
    +public SAXParser()
    +Map<String, Object> parseConfigure(fileLink, xsdFileLink)
    +Map<String, Object> parseInput(fileLink, xsdFileLink)
    -class SAXParserHandler
}
JAXBParser -down-|> Parser
class JAXBParser {
    +Map<String, Object> parseInput(fileLink, xsdFileLink)
}
STAXParser -down-|> Parser
class STAXParser {
    +Map<String, Object> parseInput(fileLink, xsdFileLink)
}

Controller *-- DataHandler
class DataHandler {
    -SystemState state
    -Field field
    -int iterationNum
    -AnimalListener observer
    +DataHandler(Map<String, Object> entities, Field field)
    +void processNextStep()
    +Snapshot generateShapshot()
    +Statistics generateStatistics()
}

SystemState *-- Entity
class Entity {
}
Animal --|> Entity
abstract class Animal {
    #AnimalCode code
    #boolean alive
    #int lifetime
    #int speed 
    #int feelDistance
    #int reproductionFrequency
    #int xCoordinate
    #int yCoordinate
    #int age
    #IAnimalListener listener
    +Animal(code, lifetime, speed, feelDistance, x, y, iAnimalListener)
    +{abstract} void nextAction(List<Animal> animals, List<Stream> streams, Field field)
    #{abstract} void reproduct()
    #{abstract} void die()
}

Animal ..> IAnimalListener
interface IAnimalListener {
    void animalDie(Animal animal)
    void animalReproduct(Animal animal)
}

AnimalListener ..|> IAnimalListener
class AnimalListener {
    -DataHandler listener
    AnimalListener(DataHandler dataHandler)
    +void animalDie(Animal animal)
    +void animalReproduct(Animal animal)
}

Fish -up-|> Animal
class Fish {
    -int reproductFrequency
    +Fish (reproductFrequency, lifetime, speed, feelDistance, x, y, iAnimalListener)
    +nextAction(animals, streams, field)
    +void reproduct()
    -void move(animals, streams, field)
}

Shark -up-|> Animal
class Shark {
    -int timeHungryDeath
    -int timeHungry
    -int reproductAge
    +Shark (lifetime, timeHungryDeath, speed, feelDistance, x, y, iAnimalListener)
    +nextAction(animals, field)
    +void reproduct()
    -void move(animals, field)
    -void eat(List<Animal> animals)
}

Stream -up-|>Entity
class Stream {
    -int speed
    -int StartCoordinate
    -int EndCoordinate
    +Stream(speed, startCoordinate, endCoordinate)
}

DataHandler *-- SystemState
class SystemState {
    -boolean fieldClosed
    -int fieldHeight
    -int fieldWidth
    -List<Stream> streams
    -List<Animal> animals
    +SystemState(streams, animals, field)
    +void updateSystemState()
}

Controller *-- Visualizer
Visualizer ..> Snapshot
Visualizer ..> Field
class Visualizer {
    +Visualizer(Field field)
    +void visualize(Snapshot snapshot)
    +void closeScreen()
}

Controller *-left- Writer
Writer ..> Statistics
abstract class Writer {
    -String fileNameString
    -boolean overwritePermission
    #StringBuilder content
    +Writer(fileNameString, overwritePermission)
    +void createFile()
    +void writeFile()
    +voif deleteFile(String fileName)
}

XMLWriter --|> Writer
abstract class XMLWriter {
    +XMLWriter(fileNameSting, overwritePermission)
    +{abstract} void addRecord(Statistics statistics)
}
DOM_XMLWriter --|> XMLWriter
class DOM_XMLWriter {
    +DOM_XMLWriter(fileNameString, overwritePermission)
    +void addRecord(Statistics statistics)
}
JAXBWriter --|> XMLWriter
class JAXBWriter {
    +JAXBWriter(fileNameString, overwritePermission)
    +void addRecord(Statistics statistics)
}

CSVWriter --|> Writer
abstract class CSVWriter {
    +CSVWriter(fileNameSting, overwritePermission)
    #boolean validateXML(String xmlFileName, String xsdFileName)
    +{abstract} void createCSV(String fileXML, String fileXSD)
}
DOM_CSVWriter --|> CSVWriter
class DOM_CSVWriter {
    +DOM_CSVWriter(fileNameString, overwritePermission)
    +void createCSV(String fileXML, String fileXSD)
}
JAXB_CSVWriter --|> CSVWriter
class JAXB_CSVWriter {
    +JAXB_CSVWriter(fileNameString, overwritePermission)
    +void createCSV(String fileXML, String fileXSD)
}


@enduml